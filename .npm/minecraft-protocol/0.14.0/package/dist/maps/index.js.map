{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["var assert = require('assert')\n  , crypto = require('crypto')\n  , bufferEqual = require('buffer-equal')\n  , Client = require('./client')\n  , dns = require('dns')\n  , net = require('net')\n  , Server = require('./server')\n  , Yggdrasil = require('./yggdrasil.js')\n  , getSession = Yggdrasil.getSession\n  , validateSession = Yggdrasil.validateSession\n  , joinServer = Yggdrasil.joinServer\n  , serializer = require(\"./transforms/serializer\")\n  , states = serializer.states\n  , debug = require(\"./debug\")\n  , utils = require(\"./utils\")\n  ;\n\nvar ursa;\ntry {\n  ursa = require(\"ursa\");\n} catch(e) {\n  console.log(\"You are using a pure-javascript implementation of RSA.\");\n  console.log(\"Your performance might be subpar. Please consider installing URSA\");\n  ursa = require(\"ursa-purejs\");\n}\n\nvar version = 47;\nvar minecraftVersion = '1.8.1';\n\nvar packets = require(\"../protocol/protocol\");\nvar readPackets = require(\"./packets\").readPackets;\nvar packetIndexes = readPackets(packets, states);\n\nmodule.exports = {\n  createClient: createClient,\n  createServer: createServer,\n  Client: Client,\n  Server: Server,\n  states: states,\n  createPacketBuffer: serializer.createPacketBuffer,\n  parsePacketData: serializer.parsePacketData,\n  packetFields: packetIndexes.packetFields,\n  packetNames: packetIndexes.packetNames,\n  packetIds: packetIndexes.packetIds,\n  packetStates: packetIndexes.packetStates,\n  types: serializer.types,\n  get: serializer.get,\n  evalCondition: utils.evalCondition,\n  ping: require('./ping'),\n  yggdrasil: Yggdrasil,\n  version: version,\n  minecraftVersion: minecraftVersion\n};\n\nfunction createServer(options) {\n  options = options || {};\n  var port = options.port != null ?\n    options.port :\n    options['server-port'] != null ?\n      options['server-port'] :\n      25565;\n  var host = options.host || '0.0.0.0';\n  var kickTimeout = options.kickTimeout || 10 * 1000;\n  var checkTimeoutInterval = options.checkTimeoutInterval || 4 * 1000;\n  var onlineMode = options['online-mode'] == null ? true : options['online-mode'];\n  // a function receiving the default status object and the client\n  // and returning a modified response object.\n  var beforePing = options.beforePing || null;\n\n  var serverKey = ursa.generatePrivateKey(1024);\n\n  var server = new Server(options);\n  server.motd = options.motd || \"A Minecraft server\";\n  server.maxPlayers = options['max-players'] || 20;\n  server.playerCount = 0;\n  server.onlineModeExceptions = {};\n  server.on(\"connection\", function(client) {\n    client.once([states.HANDSHAKING, 0x00], onHandshake);\n    client.once([states.LOGIN, 0x00], onLogin);\n    client.once([states.STATUS, 0x00], onPing);\n    client.on('end', onEnd);\n\n    var keepAlive = false;\n    var loggedIn = false;\n    var lastKeepAlive = null;\n\n    var keepAliveTimer = null;\n    var loginKickTimer = setTimeout(kickForNotLoggingIn, kickTimeout);\n\n    var hash;\n\n    function kickForNotLoggingIn() {\n      client.end('LoginTimeout');\n    }\n\n    function keepAliveLoop() {\n      if(!keepAlive)\n        return;\n\n      // check if the last keepAlive was too long ago (kickTimeout)\n      var elapsed = new Date() - lastKeepAlive;\n      if(elapsed > kickTimeout) {\n        client.end('KeepAliveTimeout');\n        return;\n      }\n      client.write(0x00, {\n        keepAliveId: Math.floor(Math.random() * 2147483648)\n      });\n    }\n\n    function onKeepAlive(packet) {\n      lastKeepAlive = new Date();\n    }\n\n    function startKeepAlive() {\n      keepAlive = true;\n      lastKeepAlive = new Date();\n      keepAliveTimer = setInterval(keepAliveLoop, checkTimeoutInterval);\n      client.on(0x00, onKeepAlive);\n    }\n\n    function onEnd() {\n      clearInterval(keepAliveTimer);\n      clearTimeout(loginKickTimer);\n    }\n\n    function onPing(packet) {\n      var response = {\n        \"version\": {\n          \"name\": minecraftVersion,\n          \"protocol\": version\n        },\n        \"players\": {\n          \"max\": server.maxPlayers,\n          \"online\": server.playerCount,\n          \"sample\": []\n        },\n        \"description\": {\"text\": server.motd},\n        \"favicon\": server.favicon\n      };\n\n      if(beforePing) {\n        response = beforePing(response, client) || response;\n      }\n\n      client.once([states.STATUS, 0x01], function(packet) {\n        client.write(0x01, {time: packet.time});\n        client.end();\n      });\n      client.write(0x00, {response: JSON.stringify(response)});\n    }\n\n    function onLogin(packet) {\n      client.username = packet.username;\n      var isException = !!server.onlineModeExceptions[client.username.toLowerCase()];\n      var needToVerify = (onlineMode && !isException) || (!onlineMode && isException);\n      if(needToVerify) {\n        var serverId = crypto.randomBytes(4).toString('hex');\n        client.verifyToken = crypto.randomBytes(4);\n        var publicKeyStrArr = serverKey.toPublicPem(\"utf8\").split(\"\\n\");\n        var publicKeyStr = \"\";\n        for(var i = 1; i < publicKeyStrArr.length - 2; i++) {\n          publicKeyStr += publicKeyStrArr[i]\n        }\n        client.publicKey = new Buffer(publicKeyStr, 'base64');\n        hash = crypto.createHash(\"sha1\");\n        hash.update(serverId);\n        client.once([states.LOGIN, 0x01], onEncryptionKeyResponse);\n        client.write(0x01, {\n          serverId: serverId,\n          publicKey: client.publicKey,\n          verifyToken: client.verifyToken\n        });\n      } else {\n        loginClient();\n      }\n    }\n\n    function onHandshake(packet) {\n      client.serverHost = packet.serverHost;\n      client.serverPort = packet.serverPort;\n      client.protocolVersion = packet.protocolVersion;\n      if(packet.nextState == 1) {\n        client.state = states.STATUS;\n      } else if(packet.nextState == 2) {\n        client.state = states.LOGIN;\n      }\n    }\n\n    function onEncryptionKeyResponse(packet) {\n      try {\n        var verifyToken = serverKey.decrypt(packet.verifyToken, undefined, undefined, ursa.RSA_PKCS1_PADDING);\n        if(!bufferEqual(client.verifyToken, verifyToken)) {\n          client.end('DidNotEncryptVerifyTokenProperly');\n          return;\n        }\n        var sharedSecret = serverKey.decrypt(packet.sharedSecret, undefined, undefined, ursa.RSA_PKCS1_PADDING);\n      } catch(e) {\n        client.end('DidNotEncryptVerifyTokenProperly');\n        return;\n      }\n      client.setEncryption(sharedSecret);\n      hash.update(sharedSecret);\n      hash.update(client.publicKey);\n\n      var isException = !!server.onlineModeExceptions[client.username.toLowerCase()];\n      var needToVerify = (onlineMode && !isException) || (!onlineMode && isException);\n      var nextStep = needToVerify ? verifyUsername : loginClient;\n      nextStep();\n\n      function verifyUsername() {\n        var digest = mcHexDigest(hash);\n        validateSession(client.username, digest, function(err, uuid) {\n          if(err) {\n            client.end(\"Failed to verify username!\");\n            return;\n          }\n          client.uuid = uuid;\n          // Convert to a valid UUID until the session server updates and does\n          // it automatically\n          client.uuid = client.uuid.replace(/(\\w{8})(\\w{4})(\\w{4})(\\w{4})(\\w{12})/, \"$1-$2-$3-$4-$5\");\n          loginClient();\n        });\n      }\n    }\n\n    function loginClient() {\n      var isException = !!server.onlineModeExceptions[client.username.toLowerCase()];\n      if(onlineMode == false || isException) {\n        client.uuid = \"0-0-0-0-0\";\n      }\n      //client.write('compress', { threshold: 256 }); // Default threshold is 256\n      //client.compressionThreshold = 256;\n      client.write(0x02, {uuid: client.uuid, username: client.username});\n      client.state = states.PLAY;\n      loggedIn = true;\n      startKeepAlive();\n\n      clearTimeout(loginKickTimer);\n      loginKickTimer = null;\n\n      server.playerCount += 1;\n      client.once('end', function() {\n        server.playerCount -= 1;\n      });\n      server.emit('login', client);\n    }\n  });\n  server.listen(port, host);\n  return server;\n}\n\nClient.prototype.connect = function(port, host) {\n  var self = this;\n  if(port == 25565 && net.isIP(host) === 0) {\n    dns.resolveSrv(\"_minecraft._tcp.\" + host, function(err, addresses) {\n      if(addresses && addresses.length > 0) {\n        self.setSocket(net.connect(addresses[0].port, addresses[0].name));\n      } else {\n        self.setSocket(net.connect(port, host));\n      }\n    });\n  } else {\n    self.setSocket(net.connect(port, host));\n  }\n};\n\nfunction createClient(options) {\n  assert.ok(options, \"options is required\");\n  var port = options.port || 25565;\n  var host = options.host || 'localhost';\n  var clientToken = options.clientToken || Yggdrasil.generateUUID();\n  var accessToken = options.accessToken || null;\n\n  assert.ok(options.username, \"username is required\");\n  var haveCredentials = options.password != null || (clientToken != null && accessToken != null);\n  var keepAlive = options.keepAlive == null ? true : options.keepAlive;\n\n\n  var client = new Client(false);\n  client.on('connect', onConnect);\n  if(keepAlive) client.on([states.PLAY, 0x00], onKeepAlive);\n  client.once([states.LOGIN, 0x01], onEncryptionKeyRequest);\n  client.once([states.LOGIN, 0x02], onLogin);\n  client.once(\"compress\", onCompressionRequest);\n  client.on(\"set_compression\", onCompressionRequest);\n  if(haveCredentials) {\n    // make a request to get the case-correct username before connecting.\n    var cb = function(err, session) {\n      if(err) {\n        client.emit('error', err);\n      } else {\n        client.session = session;\n        client.username = session.username;\n        accessToken = session.accessToken;\n        client.emit('session');\n        client.connect(port, host);\n      }\n    };\n\n    if(accessToken != null) getSession(options.username, accessToken, clientToken, true, cb);\n    else getSession(options.username, options.password, clientToken, false, cb);\n  } else {\n    // assume the server is in offline mode and just go for it.\n    client.username = options.username;\n    client.connect(port, host);\n  }\n\n  return client;\n\n  function onConnect() {\n    client.write(0x00, {\n      protocolVersion: version,\n      serverHost: host,\n      serverPort: port,\n      nextState: 2\n    });\n    client.state = states.LOGIN;\n    client.write(0x00, {\n      username: client.username\n    });\n  }\n\n  function onCompressionRequest(packet) {\n    client.compressionThreshold = packet.threshold;\n  }\n\n  function onKeepAlive(packet) {\n    client.write(0x00, {\n      keepAliveId: packet.keepAliveId\n    });\n  }\n\n  function onEncryptionKeyRequest(packet) {\n    crypto.randomBytes(16, gotSharedSecret);\n\n    function gotSharedSecret(err, sharedSecret) {\n      if(err) {\n        debug(err);\n        client.emit('error', err);\n        client.end();\n        return;\n      }\n      if(haveCredentials) {\n        joinServerRequest(onJoinServerResponse);\n      } else {\n        if(packet.serverId != '-') {\n          debug('This server appears to be an online server and you are providing no password, the authentication will probably fail');\n        }\n        sendEncryptionKeyResponse();\n      }\n\n      function onJoinServerResponse(err) {\n        if(err) {\n          client.emit('error', err);\n          client.end();\n        } else {\n          sendEncryptionKeyResponse();\n        }\n      }\n\n      function joinServerRequest(cb) {\n        var hash = crypto.createHash('sha1');\n        hash.update(packet.serverId);\n        hash.update(sharedSecret);\n        hash.update(packet.publicKey);\n\n        var digest = mcHexDigest(hash);\n        joinServer(client.username, digest, accessToken, client.session.selectedProfile.id, cb);\n      }\n\n      function sendEncryptionKeyResponse() {\n        var pubKey = mcPubKeyToURsa(packet.publicKey);\n        var encryptedSharedSecretBuffer = pubKey.encrypt(sharedSecret, undefined, undefined, ursa.RSA_PKCS1_PADDING);\n        var encryptedVerifyTokenBuffer = pubKey.encrypt(packet.verifyToken, undefined, undefined, ursa.RSA_PKCS1_PADDING);\n        client.write(0x01, {\n          sharedSecret: encryptedSharedSecretBuffer,\n          verifyToken: encryptedVerifyTokenBuffer,\n        });\n        client.setEncryption(sharedSecret);\n      }\n    }\n  }\n\n  function onLogin(packet) {\n    client.state = states.PLAY;\n    client.uuid = packet.uuid;\n    client.username = packet.username;\n  }\n}\n\n\nfunction mcPubKeyToURsa(mcPubKeyBuffer) {\n  var pem = \"-----BEGIN PUBLIC KEY-----\\n\";\n  var base64PubKey = mcPubKeyBuffer.toString('base64');\n  var maxLineLength = 65;\n  while(base64PubKey.length > 0) {\n    pem += base64PubKey.substring(0, maxLineLength) + \"\\n\";\n    base64PubKey = base64PubKey.substring(maxLineLength);\n  }\n  pem += \"-----END PUBLIC KEY-----\\n\";\n  return ursa.createPublicKey(pem, 'utf8');\n}\n\nfunction mcHexDigest(hash) {\n  var buffer = new Buffer(hash.digest(), 'binary');\n  // check for negative hashes\n  var negative = buffer.readInt8(0) < 0;\n  if(negative)\n    performTwosCompliment(buffer);\n  var digest = buffer.toString('hex');\n  // trim leading zeroes\n  digest = digest.replace(/^0+/g, '');\n  if(negative)\n    digest = '-' + digest;\n  return digest;\n\n  function performTwosCompliment(buffer) {\n    var carry = true;\n    var i, newByte, value;\n    for(i = buffer.length - 1; i >= 0; --i) {\n      value = buffer.readUInt8(i);\n      newByte = ~value & 0xff;\n      if(carry) {\n        carry = newByte === 0xff;\n        buffer.writeUInt8((newByte + 1) & 0xff, i);\n      } else {\n        buffer.writeUInt8(newByte, i);\n      }\n    }\n  }\n}\n"],"sourceRoot":"/source/"}