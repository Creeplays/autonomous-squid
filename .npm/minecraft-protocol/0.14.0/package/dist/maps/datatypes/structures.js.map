{"version":3,"sources":["datatypes/structures.js"],"names":[],"mappings":"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","file":"datatypes/structures.js","sourcesContent":["var getField = require(\"../utils\").getField;\nvar debug = require(\"../debug\");\nvar evalCondition = require(\"../utils\").evalCondition;\n\nmodule.exports = {\n  'array': [readArray, writeArray, sizeOfArray],\n  'count': [readCount, writeCount, sizeOfCount],\n  'container': [readContainer, writeContainer, sizeOfContainer]\n};\n\n\nfunction evalCount(count, fields) {\n  if(fields[count[\"field\"]] in count[\"map\"])\n    return count[\"map\"][fields[count[\"field\"]]];\n  return count[\"default\"];\n}\n\nfunction readArray(buffer, offset, typeArgs, rootNode) {\n  var results = {\n    value: [],\n    size: 0\n  };\n  var count;\n  if(typeof typeArgs.count === \"object\") {\n    count = evalCount(typeArgs.count, rootNode);\n  }\n  else\n    count = getField(typeArgs.count, rootNode);\n  for(var i = 0; i < count; i++) {\n    var readResults = this.read(buffer, offset, {type: typeArgs.type, typeArgs: typeArgs.typeArgs}, rootNode);\n    results.size += readResults.size;\n    offset += readResults.size;\n    results.value.push(readResults.value);\n  }\n  return results;\n}\n\nfunction writeArray(value, buffer, offset, typeArgs, rootNode) {\n  for(var index in value) {\n    offset = this.write(value[index], buffer, offset, {type: typeArgs.type, typeArgs: typeArgs.typeArgs}, rootNode);\n  }\n  return offset;\n}\n\nfunction sizeOfArray(value, typeArgs, rootNode) {\n  var size = 0;\n  for(var index in value) {\n    size += this.sizeOf(value[index], {type: typeArgs.type, typeArgs: typeArgs.typeArgs}, rootNode);\n  }\n  return size;\n}\n\n\nfunction readContainer(buffer, offset, typeArgs, rootNode) {\n  var results = {\n    value: {},\n    size: 0\n  };\n  // BLEIGH. Huge hack because I have no way of knowing my current name.\n  // TODO : either pass fieldInfo instead of typeArgs as argument (bleigh), or send name as argument (verybleigh).\n  // TODO : what I do inside of roblabla/Protocols is have each \"frame\" create a new empty slate with just a \"super\" object pointing to the parent.\n  var backupThis = rootNode.this;\n  rootNode.this = results.value;\n  for(var index in typeArgs.fields) {\n    var readResults = this.read(buffer, offset, typeArgs.fields[index], rootNode);\n    if(readResults == null || readResults.value == null) {\n      continue;\n    }\n    results.size += readResults.size;\n    offset += readResults.size;\n    results.value[typeArgs.fields[index].name] = readResults.value;\n  }\n  rootNode.this = backupThis;\n  return results;\n}\n\nfunction writeContainer(value, buffer, offset, typeArgs, rootNode) {\n  var context = value.this ? value.this : value;\n  var backupThis = rootNode.this;\n  rootNode.this = value;\n  for(var index in typeArgs.fields) {\n    if(!context.hasOwnProperty(typeArgs.fields[index].name) && typeArgs.fields[index].type != \"count\" &&\n      (typeArgs.fields[index].type != \"condition\" || evalCondition(typeArgs.fields[index].typeArgs, rootNode))) {\n      debug(new Error(\"Missing Property \" + typeArgs.fields[index].name).stack);\n      console.log(context);\n    }\n    offset = this.write(context[typeArgs.fields[index].name], buffer, offset, typeArgs.fields[index], rootNode);\n  }\n  rootNode.this = backupThis;;\n  return offset;\n}\n\nfunction sizeOfContainer(value, typeArgs, rootNode) {\n  var size = 0;\n  var context = value.this ? value.this : value;\n  var backupThis = rootNode.this;\n  rootNode.this = value;\n  for(var index in typeArgs.fields) {\n    size += this.sizeOf(context[typeArgs.fields[index].name], typeArgs.fields[index], rootNode);\n  }\n  rootNode.this = backupThis;\n  return size;\n}\n\nfunction readCount(buffer, offset, typeArgs, rootNode) {\n  return this.read(buffer, offset, {type: typeArgs.type}, rootNode);\n}\n\nfunction writeCount(value, buffer, offset, typeArgs, rootNode) {\n  // Actually gets the required field, and writes its length. Value is unused.\n  // TODO : a bit hackityhack.\n  return this.write(getField(typeArgs.countFor, rootNode).length, buffer, offset, {type: typeArgs.type}, rootNode);\n}\n\nfunction sizeOfCount(value, typeArgs, rootNode) {\n  // TODO : should I use value or getField().length ?\n  return this.sizeOf(getField(typeArgs.countFor, rootNode).length, {type: typeArgs.type}, rootNode);\n}\n"],"sourceRoot":"/source/"}