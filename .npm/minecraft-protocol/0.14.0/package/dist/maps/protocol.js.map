{"version":3,"sources":["protocol.js"],"names":[],"mappings":";;;;AAAA,SAAS,WAAW,GAAG;AACrB,MAAI,CAAC,KAAK,GAAG,EAAE,CAAC;CACjB;;AAED,WAAW,CAAC,SAAS,CAAC,OAAO,GAAG,UAAS,IAAI,EAAE,SAAS,EAAE;AACxD,MAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;CAC9B,CAAC;;AAEF,WAAW,CAAC,SAAS,CAAC,QAAQ,GAAG,UAAS,KAAK,EAAE;AAC/C,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,eAAY,KAAK,CAAC,CAAC,OAAO,CAAC,UAAS,IAAI,EAAE;AACxC,QAAI,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;GACjC,CAAC,CAAC;CACJ,CAAC;;AAEF,WAAW,CAAC,SAAS,CAAC,IAAI,GAAG,UAAS,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE;AAC1E,MAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AACtC,MAAG,CAAC,IAAI,EAAE;AACR,WAAO;AACL,WAAK,EAAE,IAAI,KAAK,CAAC,qBAAqB,GAAG,SAAS,CAAC,IAAI,CAAC;KACzD,CAAC;GACH;AACD,MAAI,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;AACpF,MAAG,WAAW,IAAI,IAAI,EAAE;AACtB,UAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;GACxE;AACD,MAAG,WAAW,IAAI,WAAW,CAAC,KAAK,EAAE,OAAO,EAAC,KAAK,EAAE,WAAW,CAAC,KAAK,EAAC,CAAC;AACvE,SAAO,WAAW,CAAC;CACpB,CAAC;;AAEF,WAAW,CAAC,SAAS,CAAC,KAAK,GAAG,UAAS,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE;AACjF,MAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AACtC,MAAG,CAAC,IAAI,EAAE;AACR,WAAO;AACL,WAAK,EAAE,IAAI,KAAK,CAAC,qBAAqB,GAAG,SAAS,CAAC,IAAI,CAAC;KACzD,CAAC;GACH;AACD,SAAO,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;CAChF,CAAC;;AAEF,WAAW,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE;AAClE,MAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AACtC,MAAG,CAAC,IAAI,EAAE;AACR,UAAM,IAAI,KAAK,CAAC,qBAAqB,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;GACzD;AACD,MAAG,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,UAAU,EAAE;AAChC,WAAO,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;GAChE,MAAM;AACL,WAAO,IAAI,CAAC,CAAC,CAAC,CAAC;GAChB;CACF,CAAC;;AAIF,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC","file":"protocol.js","sourcesContent":["function NMProtocols() {\n  this.types = {};\n}\n\nNMProtocols.prototype.addType = function(name, functions) {\n  this.types[name] = functions;\n};\n\nNMProtocols.prototype.addTypes = function(types) {\n  var self = this;\n  Object.keys(types).forEach(function(name) {\n    self.addType(name, types[name]);\n  });\n};\n\nNMProtocols.prototype.read = function(buffer, cursor, fieldInfo, rootNodes) {\n  var type = this.types[fieldInfo.type];\n  if(!type) {\n    return {\n      error: new Error(\"missing data type: \" + fieldInfo.type)\n    };\n  }\n  var readResults = type[0].call(this, buffer, cursor, fieldInfo.typeArgs, rootNodes);\n  if(readResults == null) {\n    throw new Error(\"Reader returned null : \" + JSON.stringify(fieldInfo));\n  }\n  if(readResults && readResults.error) return {error: readResults.error};\n  return readResults;\n};\n\nNMProtocols.prototype.write = function(value, buffer, offset, fieldInfo, rootNode) {\n  var type = this.types[fieldInfo.type];\n  if(!type) {\n    return {\n      error: new Error(\"missing data type: \" + fieldInfo.type)\n    };\n  }\n  return type[1].call(this, value, buffer, offset, fieldInfo.typeArgs, rootNode);\n};\n\nNMProtocols.prototype.sizeOf = function(value, fieldInfo, rootNode) {\n  var type = this.types[fieldInfo.type];\n  if(!type) {\n    throw new Error(\"missing data type: \" + fieldInfo.type);\n  }\n  if(typeof type[2] === 'function') {\n    return type[2].call(this, value, fieldInfo.typeArgs, rootNode);\n  } else {\n    return type[2];\n  }\n};\n\n\n\nmodule.exports = NMProtocols;\n"],"sourceRoot":"/source/"}